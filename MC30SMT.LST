
AVRASM ver. 1.21  MC30SMT.ASM Sun Mar 26 15:37:51 2000


         ;***************************************************************************
         ;* Playstation Import enabler code
         ;* 
         ;* File Name            :modchip.asm
         ;* Title                :Playstation Import enabler code
         ;* Date                 :99-04-22
         ;* Version              :1.3
         ;* Support email        :Hans@Liss.pp.se
         ;* Target MCU           :AT90S1200
         ;* Clock type		:2MHz ceramic resonator or equiv.
         ;*
         ;* DESCRIPTION
         ;*
         ;* This code will send a Playstation region code (four characters - SCEE
         ;* for Europe, SCEI for Japan and SCEA for the US) as a serial bitstream
         ;* at about 250bps on an I/O pin, for a short time after RESET. It also
         ;* acts as a software jumper between two lines, and can handle blanking of
         ;* another signal. All these signals will go tristate after a certain time
         ;* to hide the chip. The processor will restart when the lid is opened and
         ;* closed and when the RESET switch is pressed and released.
         ;*
         ;* There is an option of connecting a pair of switches against GND to two
         ;* pins, and they can then be used to select between three different CNT
         ;* values, or disable the chip completely. The status of the switches is
         ;* read every time the sequence is to be started.
         ;*
         ;* A three-legged, dual-colour LED can be connected to two of the I/O pins
         ;* and GND.
         ;* It will then be used to show what the processor is doing - cycling
         ;* between colours when the code is being sent, turning green when it's
         ;* ready, turning red when disabled and yellow during a pending RESET or
         ;* media change.
         ;*
         ;*                       Processor chip layout
         ;*
         ;*	                      -----v-----
         ;*                         1 [|o        |] 20   Vcc
         ;*		Lid        2 [|         |] 19   
         ;*		Reset      3 [|         |] 18   
         ;*                         4 [|         |] 17   
         ;*                         5 [|         |] 16   Calibrate
         ;*              Blanking   6 [|         |] 15   LED
         ;*              Data OUT   7 [|         |] 14   
         ;*	        Jumper IN  8 [|         |] 13   Switch 2
         ;*	        Jumper OUT 9 [|         |] 12   Switch 1
         ;*              GND       10 [|         |] 11
         ;*                            -----------
         ;*
         ;*
         ;* This code is inspired by Scott Rider's widely distributed modchip code for
         ;* the PIC 12C508. The Atmel chip is far better at most of these things - 
         ;* many more registers and much more orthogonal instruction set along with
         ;* four times the speed of a comparable PIC. The AT90S1200 is, however, more
         ;* expensive than the 12C508, but OTOH it has lots more I/O pins,
         ;* making all these bells and whistles possible. And programming it is fun!
         ;* I am working with Atmels own "wavrasm" which as far as I know is 
         ;* available on their home page on <http://www.atmel.com>.
         ;*
         ;* Going back to Scott Rider, we can define a mapping between the pin
         ;* connections for his code, which appears to be the same for most of the
         ;* commercially available chips. Pin 1 on the PIC is Vdd, 0-7V, and pin 8 is
         ;* GND. Pin 5 is used for the "blanking" signal, to block the real data from
         ;* the CD unit. Pin 6 is the serial data stream.
         ;* This means that going from a 12C508 to a AT90S1200 gives the following mapping:
         ;*
         ;*    From pin    To pin
         ;*           1 -> 20
         ;*           5 -> 6
         ;*           6 -> 7
         ;*           8 -> 10
         ;*
         ;* This code was made for a modern PU-22 motherboard, which is handled
         ;* somewhat differently. Instead of pin 5 on the 12C508, here we usually have
         ;* a jumper cable between two positions on the board. In this solution,
         ;* the LEFT one of these points should be connected to "Jumper IN", and
         ;* the RIGHT one to "Jumper OUT".
         ;* You can leave the jumper in there but then the chip can never be
         ;* completely hidden, which may or may not be significant.
         ;*
         ;* Where to find the RESET and Lid signals on an old motherboard is left as
         ;* an excercise for the reader. All I know is that the Lid signal was usually
         ;* pin 4 on the older, 18 pin 16c84 modchips.
         ;*
         ;* More info and pictures can be found on <http://www.maxking.com>.
         ;* On the PU-22 board, the CD Lid signal is the one close to the CD connector,
         ;* and the RESET signal can be found on the upper half of the board.
         ;*
         ;* ********* *NEW for version 1.1 ***************
         ;* I have cleaned up the delay sections and created a single delay function,
         ;* together with a matching macro, WAITMS. Now the chip will read its delay
         ;* constants from the EEPROM making it tunable to different chip speeds.
         ;* There is also a subroutine "calibrate" that can be used to calibrate the
         ;* delay loop. Connect a pushbutton between earth and pin 19 on the chip. Keep
         ;* this pressed when starting the Playstation and keep it pressed for exactly
         ;* 10 seconds, then release it. The new delay constants will be calculated
         ;* and stored into the EEPROM.
         ;*
         ;* ********* *NEW for version 1.2 ***************
         ;* I have remade some of the Count handling. There are still three different
         ;* Count values available, selectable with the switch. Now, however, it is
         ;* possible to change those values. To _decrease_ the current count value,
         ;* simply boot a game and press the Calibrate button whenever you think
         ;* that enough pulses have passed, usually just after the copyright screen
         ;* has disappeared and turned black. To _increase_ the value, wait until the
         ;* end of the cycle and then press the button. The current Count will increase
         ;* by ten.
         ;* There is now also a way to easily recalibrate the speed with a default value
         ;* for 5V. Just do a normal calibration but release the button almost immediately,
         ;* and the calibration values will be set to 115 and 103, respectively (my
         ;* calculated values).
         ;*
         ;* ********* *NEW for version 1.2.1 ***************
         ;* Added debounce to lid and RESET switches. Added weak pullup to RESET input
         ;*
         ;* ********* *NEW for version 1.3   ***************
         ;* The default timing is now calibrated for an AT90S1200 with a 2MHz ceramic
         ;* resonator, and the default Count value is calibrated for Final Fantasy VIII,
         ;* which works just fine with this code. All the features are still there but
         ;* they are mostly unnecessary now..
         ;*
         ;***************************************************************************
         
          .device	AT90S1200	;Prohibits use of non-implemented instructions
         
          .include "1200def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number		:AVR000
         ;* File Name		:"1200def.inc"
         ;* Title		:Register/Bit Definitions for the AT90S1200
         ;* Date	 		:97.12.11
         ;* Version		:1.20
         ;* Support telephone	:+47 72 88 87 20 (ATMEL Norway)
         ;* Support fax		:+47 72 88 87 18 (ATMEL Norway)
         ;* Support E-Mail	:avr@atmel.com
         ;* Target MCU		:AT90S1200
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* 
         ;* The Register names are represented by their hexadecimal addresses.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB		;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16		;output to PORTB
         ;*
         ;* in	r16,TIFR		;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0		;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set		;jump if set
         ;* ...				;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S1200
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	GIMSK	=$3b
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	WDTCR	=$21
          .equ	EEAR	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	ACSR	=$08
         
         ;***** Bit Definitions
         
          .equ	INT0	=6
         
          .equ	TOIE0	=1
         
          .equ	TOV0	=1
         
          .equ	SE	=5
          .equ	SM	=4
          .equ	ISC01	=1
          .equ	ISC00	=0
         
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
          .equ	EEWE	=1
          .equ	EERE	=0
         
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
          .equ	ACD	=7
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	OVF0addr=$002	;Overflow0 Interrupt Vector Address
          .equ	ACIaddr =$003	;Analog Comparator Interrupt Vector Address
         
          .def	ZL	=r30
         
          .LISTMAC
         
         ;***** Global Register Variables
         
         
         ;***** Arg registers
          .def	A1	=r16
          .def	A2	=r17
          .def	A3	=r18
          .def	CNT	=r19
          .def	D1	=r28
          .def	D2	=r29
          .def	X	=r30
          .def	curC	=r23
          .def	STATE	=r24
         
         ;***** Scratch regs
          .def	I	=r20
          .def	J	=r21
          .def	K	=r22
         
         ;***** EEPROM vars
          .equ	storedD1=0
          .equ	storedD2=1
          .equ	storedC1=2
          .equ	storedC2=3
          .equ	storedC3=4
         
         ;.equ	defaultD1=115
         ;.equ	defaultD2=103
          .equ	defaultD1=$FE
          .equ	defaultD2=$FD
          .equ	defaultC=100
         
         ;******* PORT B
         
         ;  Switches - active low: 0=off, 1=Use COUNT1, 2=Use COUNT2, 3=Use COUNT3
          .equ	SWITCH1=0
          .equ	SWITCH2=1
         
          .equ	SWITCH3=4
         
         ;  Red and green LED ouput pins
          .equ	LEDBIT=3
         ;.equ	GLEDBIT=6
         
         ;******* PORT D
         
         ;  Media change signal, active high input
          .equ	LSIG=0
         
         ;  Reset signal, active low input
          .equ	RSIG=1
         
         ;  "Blanking" signal - extra pin for old PSX 4-line chips
          .equ	BLANK=2
         
         ;  Subchannel data stream, output
          .equ	PORTBIT=3
         
         ;  "Jumper" input
          .equ	JUMPIN=4
         
         ;  "Jumper" output
          .equ	JUMPOUT=5
         
         ;Count values for short and long settings, respectively
          .equ	COUNT1=172
          .equ	COUNT2=186
          .equ	COUNT3=198
         
         ;***** Macros
          .macro	SENDONE
          	cbi	DDRD,PORTBIT
          .endmacro
         
          .macro	SENDZERO
          	sbi	DDRD,PORTBIT
          .endmacro
         
          .macro	LIGHTBOTH
          	sbi	DDRB,LEDBIT
          .endmacro
         
          .macro	LIGHTRED
          	sbi	DDRB,LEDBIT
          .endmacro
         
          .macro	LIGHTGRN
          	cbi	DDRB,LEDBIT
          .endmacro
         
          .macro	LIGHTOFF
          	cbi	DDRB,LEDBIT
          .endmacro
         
          .macro	WAITMS
          	ldi	X,@0
          	rcall	waitxms
          .endmacro
         
         ; Execute the software "jumper". Five cycles.
          .macro	DOJUMP
          	sbis	PIND,JUMPIN
          	sbi	DDRD,JUMPOUT
          	sbic	PIND,JUMPIN
          	cbi	DDRD,JUMPOUT
          .endmacro
         
          .macro	ENBLANK
          	cbi	PORTD,BLANK
          	sbi	DDRD,BLANK
          .endmacro
         
          .macro	DEBLANK
          	cbi	PORTD,BLANK
          	cbi	DDRD,BLANK
          .endmacro
         
         ;***** Code
         
000000 c180      	rjmp	START		;Reset Handle
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'waitxms'
         ;*
         ;* Stored vars D1 and D2 is used for calibration.
         ;*
         ;* This subroutine will wait for x ms minus one LDI+call+return.
         ;* The innermost loop is D1 * (5 + 1 + 1 + 2) cycles. We execute that loop
         ;* (+ 3 cycles for DEC+BRNI) X-1 times, and then we do the rest minus 8 cycles
         ;* in a separate loop (D2 * (5 + 1 + 1 + 1 + 2)). This leaves 8 cycles = 7 for
         ;* call/return and one for the necessary LDI X,# instruction.
         ;*
         ;***************************************************************************
         
         
          waitxms:
000001 95ea      	dec	X
000002 f089      	breq	vxloop20
          wxloop0:
000003 2f4c      	mov	I,d1
          wxloop1:
000004   +  	DOJUMP
000004 9b84      	sbis	PIND,JUMPIN
000005 9a8d      	sbi	DDRD,JUMPOUT
000006 9984      	sbic	PIND,JUMPIN
000007 988d      	cbi	DDRD,JUMPOUT
          .endmacro
000008 0000      	nop
000009 0000      	nop
00000a 0000      	nop
00000b 0000      	nop
00000c 0000      	nop
00000d 0000      	nop
00000e 0000      	nop
00000f 0000      	nop
000010 954a      	dec	I
000011 f791      	brne	wxloop1
         
000012 95ea      	dec	X
000013 f779      	brne	wxloop0
         
          vxloop20:
000014 2f4d      	mov	I,d2
          wxloop2:
000015   +  	DOJUMP
000015 9b84      	sbis	PIND,JUMPIN
000016 9a8d      	sbi	DDRD,JUMPOUT
000017 9984      	sbic	PIND,JUMPIN
000018 988d      	cbi	DDRD,JUMPOUT
          .endmacro
000019 0000      	nop
00001a 0000      	nop
00001b 0000      	nop
00001c 0000      	nop
00001d 0000      	nop
00001e 0000      	nop
00001f 0000      	nop
000020 0000      	nop
000021 0000      	nop
000022 954a      	dec	I
000023 f789      	brne	wxloop2
         
000024 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'calibrate', called from sysinit
         ;*
         ;* Do 10000 cycles each loop, increasing r24:r25 by one each pass.
         ;* This subroutine will calibrate 1 ms if run during 10 sec. The switch on
         ;* SWITCH3 is checked for release on every pass.
         ;*
         ;* 'makecns' will calculate the delay constants d1 and d2 as follows:
         ;* 	d1=(n-3)/9
         ;* 	d2=(n-8)/10
         ;* and then store them to the EEPROM
         ;*
         ;****************************************************************************
         
          calibrate:
000025   +  	LIGHTRED
000025 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000026 e080      	ldi	r24,0
000027 e090      	ldi	r25,0
          cloop0:
000028 99b4      	sbic	PINB,SWITCH3
000029 c00a      	rjmp	makecns
         
00002a e245      	ldi	I,37
          cloop1:
00002b e559      	ldi	J,89
          cloop2:
00002c 955a      	dec	J
00002d f7f1      	brne	cloop2
         
00002e 954a      	dec	I
00002f f7d9      	brne	cloop1
         
000030 9593      	inc	r25
000031 f7b1      	brne	cloop0
000032 9583      	inc	r24
000033 cff4      	rjmp	cloop0
         
          makecns:
000034 5093      	subi	r25,3
000035 4080      	sbci	r24,0
         
          mc01:
000036 2fa8      	mov	r26,r24
000037 2fb9      	mov	r27,r25
000038 e0c0      	ldi	d1,0
          l1:
000039 30a0      	cpi	r26,0
00003a f411      	brne	l12
00003b 30b9      	cpi	r27,9
00003c f020      	brlo	l13
          l12:
00003d 50b9      	subi	r27,9
00003e 40a0      	sbci	r26,0
         
00003f 95c3      	inc	d1
000040 cff8      	rjmp	l1
         
          l13:
000041 5095      	subi	r25,5
000042 4080      	sbci	r24,0
000043 e0d0      	ldi	d2,0
          l2:
000044 3080      	cpi	r24,0
000045 f411      	brne	l22
000046 309a      	cpi	r25,10
000047 f020      	brlo	l23
          l22:
000048 509a      	subi	r25,10
000049 4080      	sbci	r24,0
         
00004a 95d3      	inc	d2
00004b cff8      	rjmp	l2
         
          l23:
         ; ** If d1 is less than 5, we have a value reset at hand and will set
         ; ** the values to a suitable 5V default
00004c 31ce      	cpi	d1,30
00004d f488      	brsh	l231
00004e efce      	ldi	d1,defaultD1
00004f efdd      	ldi	d2,defaultD2
000050   +  	LIGHTBOTH
000050 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000051   +  	WAITMS	125
000051 e7ed      	ldi	X,0x7d
000052 dfae      	rcall	waitxms
          .endmacro
000053   +  	LIGHTGRN
000053 98bb      	cbi	DDRB,LEDBIT
          .endmacro
000054   +  	WAITMS	125
000054 e7ed      	ldi	X,0x7d
000055 dfab      	rcall	waitxms
          .endmacro
000056   +  	LIGHTBOTH
000056 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000057   +  	WAITMS	125
000057 e7ed      	ldi	X,0x7d
000058 dfa8      	rcall	waitxms
          .endmacro
000059   +  	LIGHTGRN
000059 98bb      	cbi	DDRB,LEDBIT
          .endmacro
00005a   +  	WAITMS	125
00005a e7ed      	ldi	X,0x7d
00005b dfa5      	rcall	waitxms
          .endmacro
00005c   +  	LIGHTBOTH
00005c 9abb      	sbi	DDRB,LEDBIT
          .endmacro
00005d   +  	WAITMS	125
00005d e7ed      	ldi	X,0x7d
00005e dfa2      	rcall	waitxms
          .endmacro
          l231:
00005f e040      	ldi	I,storedD1
000060 bb4e      	out	EEAR,I
000061 bbcd      	out	EEDR,d1
000062 9ae1      	sbi	EECR,EEWE
          l24:
000063 99e1      	sbic	EECR,EEWE
000064 cffe      	rjmp	l24
         
000065 e041      	ldi	I,storedD2
000066 bb4e      	out	EEAR,I
000067 bbdd      	out	EEDR,d2
000068 9ae1      	sbi	EECR,EEWE
         
000069   +  	LIGHTGRN
000069 98bb      	cbi	DDRB,LEDBIT
          .endmacro
00006a c0cc      	rjmp	cont
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'sendbyte'
         ;*
         ;* This subroutine will send one character to the (globally defined) I/O
         ;* port.
         ;* A 'one' is done by making the port bit an input bit and letting the
         ;* PSX pullup pull the line up. A 'zero' is done by making it an output
         ;* - the port bit data is a 'zero' during all this so the only thing
         ;* that changes is the port direction, which is set to 'one' for output
         ;* ('zero'), and 'zero' for input ('one').
         ;* Each bit will take 4 ms, and one start bit and two stop bits will be sent
         ;*
         ;***************************************************************************
         
          sendbyte:
         ; Invert byte
00006b 9500      	com	A1
         ; Send a start bit
00006c   +  	SENDONE
00006c 988b      	cbi	DDRD,PORTBIT
          .endmacro
00006d   +  	WAITMS	4
00006d e0e4      	ldi	X,0x4
00006e df92      	rcall	waitxms
          .endmacro
00006f e018      	ldi	A2,8
000070 9507      sbloop0:ror	A1
000071 f010      	brcs	bitset
000072   +  	SENDZERO
000072 9a8b      	sbi	DDRD,PORTBIT
          .endmacro
000073 f408      	brcc	bitclr
000074   +  bitset:	SENDONE
000074 988b      	cbi	DDRD,PORTBIT
          .endmacro
000075   +  bitclr:	WAITMS	4
000075 e0e4      	ldi	X,0x4
000076 df8a      	rcall	waitxms
          .endmacro
000077 951a      	dec	A2
000078 f7b9      	brne	sbloop0
         ; Send two stop bits
000079   +  	SENDZERO
000079 9a8b      	sbi	DDRD,PORTBIT
          .endmacro
00007a   +  	WAITMS	4
00007a e0e4      	ldi	X,0x4
00007b df85      	rcall	waitxms
          .endmacro
00007c   +  	WAITMS	4
00007c e0e4      	ldi	X,0x4
00007d df83      	rcall	waitxms
          .endmacro
00007e 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'sysinit'
         ;*
         ;* This subroutine will initialize the I/O ports and check the switch
         ;* settings
         ;*
         ;* LED is unlit
         ;*
         ;***************************************************************************
         
          sysinit:
         ; Prepare the Reset and Media Change signal inputs (no pullup)
         ; and the SWITCH3 portbit (internal pullup)
00007f 9889      	cbi	DDRD,RSIG
000080 9888      	cbi	DDRD,LSIG
000081 9a91      	sbi	PORTD,RSIG
000082 9890      	cbi	PORTD,LSIG
000083 98bc      	cbi	DDRB,SWITCH3
000084 9ac4      	sbi	PORTB,SWITCH3
         
         ; Set the LED signal as input
000085 98c3      	cbi	PORTB,LEDBIT
         
         ; Load the stored variables from the EEPROM
000086 e040      	ldi	I,storedD1
000087 bb4e      	out	EEAR,I
000088 9ae0      	sbi	EECR,EERE
000089 b3cd      	in	d1,EEDR
00008a e041      	ldi	I,storedD2
00008b bb4e      	out	EEAR,I
00008c 9ae0      	sbi	EECR,EERE
00008d b3dd      	in	d2,EEDR
         
00008e 3fcf      	cpi	d1,255
00008f f411      	brne	sinit00
000090 efce      	ldi	d1,defaultD1
000091 efdd      	ldi	d2,defaultD2
         
          sinit00:
         
         ; Check if the Calibrate switch is pressed
000092 9bb4      	sbis	PINB,SWITCH3
000093 cf91      	rjmp	calibrate
         
         ; Check the DIP switch to see whether we should go tristate or which count calue
         ; to select
000094 98b8      	cbi	DDRB,SWITCH1
000095 9ac0      	sbi	PORTB,SWITCH1
000096 98b9      	cbi	DDRB,SWITCH2
000097 9ac1      	sbi	PORTB,SWITCH2
         
000098 99b0      	sbic	PINB,SWITCH1
000099 c004      	rjmp	sinit1
00009a 9bb1      	sbis	PINB,SWITCH2
00009b c0e3      	rjmp	passive
00009c e073      	ldi	curC,storedC2
00009d c005      	rjmp	sinitx
         
          sinit1:
00009e 99b1      	sbic	PINB,SWITCH2
00009f c002      	rjmp	sinit3
0000a0 e072      	ldi	curC,storedC1
0000a1 c001      	rjmp	sinitx
         
          sinit3:
0000a2 e074      	ldi	curC,storedC3
         
          sinitx:
0000a3 bb7e      	out	EEAR,curC
0000a4 9ae0      	sbi	EECR,EERE
0000a5 b33d      	in	CNT,EEDR
         
0000a6 3f3f      	cpi	CNT,255
0000a7 f409      	brne	sinitx1
0000a8 e634      	ldi	CNT,defaultC
         
          sinitx1:
0000a9   +  	SENDONE
0000a9 988b      	cbi	DDRD,PORTBIT
          .endmacro
0000aa 9893      	cbi	PORTD,PORTBIT
         
         
         ; Prepare the "jumper" bits. The input will have a pullup and the output
         ; will assume there is a pullup, and send the bits in the same way as the
         ; data is sent on PORTBIT. 
0000ab 988d      	cbi	DDRD,JUMPOUT
0000ac 988c      	cbi	DDRD,JUMPIN
0000ad 9a94      	sbi	PORTD,JUMPIN
0000ae 9895      	cbi	PORTD,JUMPOUT
         
0000af e063      	ldi	k,3
0000b0 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'init'
         ;*
         ;* This subroutine will wait for 50 ms and then take the I/O port bit low,
         ;* then wait for 1164 ms more before returning. 850 ms into the latter, the
         ;* blanking bit is taken low.
         ;*
         ;***************************************************************************
         
          init:
0000b1   +  	WAITMS	50
0000b1 e3e2      	ldi	X,0x32
0000b2 df4e      	rcall	waitxms
          .endmacro
         ;make pin go low as output
0000b3   +  	SENDZERO
0000b3 9a8b      	sbi	DDRD,PORTBIT
          .endmacro
0000b4 e111      	ldi	A2,17
0000b5   +  iloop1:	WAITMS	50
0000b5 e3e2      	ldi	X,0x32
0000b6 df4a      	rcall	waitxms
          .endmacro
0000b7 951a      	dec	A2
0000b8 f7e1      	brne	iloop1
0000b9   +  	ENBLANK
0000b9 9892      	cbi	PORTD,BLANK
0000ba 9a8a      	sbi	DDRD,BLANK
          .endmacro
0000bb e016      	ldi	A2,6
0000bc   +  iloop2:	WAITMS	50
0000bc e3e2      	ldi	X,0x32
0000bd df43      	rcall	waitxms
          .endmacro
0000be 951a      	dec	A2
0000bf f7e1      	brne	iloop2
0000c0   +  	WAITMS	14
0000c0 e0ee      	ldi	X,0xe
0000c1 df3f      	rcall	waitxms
          .endmacro
0000c2 e081      	ldi	STATE,1
0000c3 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'sendcode'
         ;*
         ;* This subroutine will send a four-byte string to the (globally defined)
         ;* I/O port a specified number of times, then return.
         ;*
         ;***************************************************************************
         
          sendcode:
0000c4 d06b      	rcall	clight
         
0000c5   +  	WAITMS	72
0000c5 e4e8      	ldi	X,0x48
0000c6 df3a      	rcall	waitxms
          .endmacro
0000c7 e503      	ldi	A1,'S'
0000c8 dfa2      	rcall	sendbyte
0000c9 e403      	ldi	A1,'C'
0000ca dfa0      	rcall	sendbyte
0000cb e405      	ldi	A1,'E'
0000cc df9e      	rcall	sendbyte
0000cd e405      	ldi	A1,'E'
0000ce df9c      	rcall	sendbyte
0000cf 9508      	ret
         
          scloop:
0000d0 2f23      	mov	A3,CNT
          scloop0:
0000d1 dff2      	rcall sendcode
0000d2 3085      	cpi	STATE,5
0000d3 f008      	brlo	scw00
0000d4 c020      	rjmp	scw05
         
         ; Measure one pulse length (between 5 and 90) on the
         ; Jumper input and set the counter to three after 4 speed
         ; changes
          scw00:
0000d5 e000      	ldi	a1,0
          scw01:
0000d6 9984      	sbic	PIND,JUMPIN
0000d7 cffe      	rjmp	scw01
0000d8 9a8d      	sbi	DDRD,JUMPOUT
          scw012:
0000d9 9b84      	sbis	PIND,JUMPIN
0000da cffe      	rjmp	scw012
0000db 988d      	cbi	DDRD,JUMPOUT
         
          scw02:
0000dc 9b84      	sbis	PIND,JUMPIN
0000dd c002      	rjmp	scw03
0000de 9503      	inc a1
0000df cffc      	rjmp	scw02
         
          scw03:
0000e0 9a8d      	sbi	DDRD,JUMPOUT
0000e1 3007      	cpi	a1,7
0000e2 f398      	brlo	scw01
0000e3 350a      	cpi	a1,90
0000e4 f788      	brsh	scw01
0000e5 3203      	cpi	a1,35
0000e6 f038      	brlo	fast
0000e7 ff80      	sbrs	STATE,0
0000e8 c008      	rjmp	sinc
         	
          scw04:
         ; Check if the Calibrate switch is pressed. If it is,
         ; terminate the loop here and store the new value for
         ; this particular COUNT in the EEPROM
         
0000e9 9bb4      	sbis	PINB,SWITCH3
0000ea c018      	rjmp	screcal
         
0000eb 952a      	dec	A3
         
0000ec f721      	brne	scloop0
0000ed 9508      	ret
         ;---------------------------------
         ; Help routines for the pulse length measurement state machine
          fast:
0000ee fd80      	sbrc	STATE,0
0000ef c001      	rjmp	sinc
0000f0 cff8      	rjmp	scw04
         
          sinc:
0000f1 9583      	inc	STATE
         ;	cpi	STATE,5
         ;	breq	terminate
0000f2 cff6      	rjmp	scw04
         
          terminate:
0000f3 e026      	ldi	A3,6
0000f4 cff4      	rjmp	scw04
         
          scw05:
0000f5 dfce      	rcall sendcode
0000f6 dfcd      	rcall sendcode
0000f7 e208      	ldi	A1,40
          scw055:
0000f8   +  	WAITMS	250
0000f8 efea      	ldi	X,0xfa
0000f9 df07      	rcall	waitxms
          .endmacro
0000fa 950a      	dec	A1
0000fb f7e1      	brne	scw055
0000fc dfc7      	rcall sendcode
0000fd dfc6      	rcall sendcode
0000fe dfc5      	rcall sendcode
0000ff dfc4      	rcall sendcode
000100 dfc3      	rcall sendcode
000101 dfc2      	rcall sendcode
000102 cfe6      	rjmp	scw04
         ; --------------------------------
         
          screcal:
000103 9bb4      	sbis	PINB,SWITCH3
000104 cffe      	rjmp	screcal
         
000105 1b32      	sub	CNT,A3
000106 bb7e      	out	EEAR,curC
000107 bb3d      	out	EEDR,CNT
000108 9ae1      	sbi	EECR,EEWE
          scrc01:
000109 99e1      	sbic	EECR,EEWE
00010a cffe      	rjmp	scrc01
         
00010b   +  	LIGHTBOTH
00010b 9abb      	sbi	DDRB,LEDBIT
          .endmacro
00010c   +  	WAITMS	125
00010c e7ed      	ldi	X,0x7d
00010d def3      	rcall	waitxms
          .endmacro
00010e   +  	LIGHTGRN
00010e 98bb      	cbi	DDRB,LEDBIT
          .endmacro
00010f   +  	WAITMS	125
00010f e7ed      	ldi	X,0x7d
000110 def0      	rcall	waitxms
          .endmacro
000111   +  	LIGHTBOTH
000111 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000112   +  	WAITMS	125
000112 e7ed      	ldi	X,0x7d
000113 deed      	rcall	waitxms
          .endmacro
000114   +  	LIGHTGRN
000114 98bb      	cbi	DDRB,LEDBIT
          .endmacro
000115   +  	WAITMS	125
000115 e7ed      	ldi	X,0x7d
000116 deea      	rcall	waitxms
          .endmacro
000117   +  	LIGHTBOTH
000117 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000118   +  	WAITMS	125
000118 e7ed      	ldi	X,0x7d
000119 dee7      	rcall	waitxms
          .endmacro
00011a   +  	LIGHTGRN
00011a 98bb      	cbi	DDRB,LEDBIT
          .endmacro
00011b   +  	WAITMS	125
00011b e7ed      	ldi	X,0x7d
00011c dee4      	rcall	waitxms
          .endmacro
00011d   +  	LIGHTBOTH
00011d 9abb      	sbi	DDRB,LEDBIT
          .endmacro
00011e   +  	WAITMS	125
00011e e7ed      	ldi	X,0x7d
00011f dee1      	rcall	waitxms
          .endmacro
000120   +  	LIGHTGRN
000120 98bb      	cbi	DDRB,LEDBIT
          .endmacro
000121   +  	WAITMS	125
000121 e7ed      	ldi	X,0x7d
000122 dede      	rcall	waitxms
          .endmacro
000123   +  	LIGHTBOTH
000123 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000124   +  	WAITMS	125
000124 e7ed      	ldi	X,0x7d
000125 dedb      	rcall	waitxms
          .endmacro
000126   +  	LIGHTGRN
000126 98bb      	cbi	DDRB,LEDBIT
          .endmacro
000127   +  	WAITMS	125
000127 e7ed      	ldi	X,0x7d
000128 ded8      	rcall	waitxms
          .endmacro
000129   +  	LIGHTBOTH
000129 9abb      	sbi	DDRB,LEDBIT
          .endmacro
00012a   +  	WAITMS	125
00012a e7ed      	ldi	X,0x7d
00012b ded5      	rcall	waitxms
          .endmacro
00012c   +  	LIGHTGRN
00012c 98bb      	cbi	DDRB,LEDBIT
          .endmacro
00012d   +  	WAITMS	125
00012d e7ed      	ldi	X,0x7d
00012e ded2      	rcall	waitxms
          .endmacro
         
00012f 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'clight'
         ;*
         ;* This subroutine will set the color of the color LED to one of three states:
         ;* red, green or both
         ;*
         ;***************************************************************************
         
          clight:
000130 956a      	dec	K
000131 f011      	breq	low
000132 9abb      	sbi	DDRB,LEDBIT
000133 f411      	brne	cret
000134 98bb      low:	cbi	DDRB,LEDBIT
000135 e062      	ldi	K,2
000136 9508      cret:	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'cont'
         ;*
         ;* This subroutine will do whatever the processor is supposed to do after
         ;* sending the code for the specified time. For now this means to loop,
         ;* possibly restarting on reset or "open lid"
         ;*
         ;***************************************************************************
         
          cont:
000137   +  	DEBLANK
000137 9892      	cbi	PORTD,BLANK
000138 988a      	cbi	DDRD,BLANK
          .endmacro
000139 988b      	cbi	DDRD,PORTBIT
00013a 9893      	cbi	PORTD,PORTBIT
00013b 988d      	cbi	DDRD,JUMPOUT
00013c 988c      	cbi	DDRD,JUMPIN
00013d 9894      	cbi	PORTD,JUMPIN
00013e 9895      	cbi	PORTD,JUMPOUT
         
          cont0:
00013f 9b81      	sbis	PIND,RSIG
000140 c005      	rjmp	rcheck
000141 9980      	sbic	PIND,LSIG
000142 c009      	rjmp	lcheck
000143 9bb4      	sbis	PINB,SWITCH3
000144 c00d      	rjmp	countup
000145 cff9      	rjmp	cont0
         
         ; Wait for Reset button release
          rcheck:
000146   +  	WAITMS	1
000146 e0e1      	ldi	X,0x1
000147 deb9      	rcall	waitxms
          .endmacro
000148   +  	LIGHTBOTH
000148 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000149 9b81      	sbis	PIND,RSIG
00014a cffb      	rjmp	rcheck
00014b c035      	rjmp	START
         	
         ; Wait for Close
          lcheck:
00014c   +  	WAITMS	1
00014c e0e1      	ldi	X,0x1
00014d deb3      	rcall	waitxms
          .endmacro
00014e   +  	LIGHTBOTH
00014e 9abb      	sbi	DDRB,LEDBIT
          .endmacro
00014f 9980      	sbic	PIND,LSIG
000150 cffb      	rjmp	lcheck
000151 c02f      	rjmp	START
         
         ; Increase the current COUNT value by 10 if the
         ; calibrate button is pressed.
         
          countup:
000152 9bb4      	sbis	PINB,SWITCH3
000153 cffe      	rjmp	countup
         
000154 5f36      	subi	CNT,-10
000155 bb7e      	out	EEAR,curC
000156 bb3d      	out	EEDR,CNT
000157 9ae1      	sbi	EECR,EEWE
          cu01:
000158 99e1      	sbic	EECR,EEWE
000159 cffe      	rjmp	cu01
         
00015a   +  	LIGHTBOTH
00015a 9abb      	sbi	DDRB,LEDBIT
          .endmacro
00015b   +  	WAITMS	125
00015b e7ed      	ldi	X,0x7d
00015c dea4      	rcall	waitxms
          .endmacro
00015d   +  	LIGHTGRN
00015d 98bb      	cbi	DDRB,LEDBIT
          .endmacro
00015e   +  	WAITMS	125
00015e e7ed      	ldi	X,0x7d
00015f dea1      	rcall	waitxms
          .endmacro
000160   +  	LIGHTBOTH
000160 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000161   +  	WAITMS	125
000161 e7ed      	ldi	X,0x7d
000162 de9e      	rcall	waitxms
          .endmacro
000163   +  	LIGHTGRN
000163 98bb      	cbi	DDRB,LEDBIT
          .endmacro
000164   +  	WAITMS	125
000164 e7ed      	ldi	X,0x7d
000165 de9b      	rcall	waitxms
          .endmacro
000166   +  	LIGHTBOTH
000166 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000167   +  	WAITMS	125
000167 e7ed      	ldi	X,0x7d
000168 de98      	rcall	waitxms
          .endmacro
000169   +  	LIGHTGRN
000169 98bb      	cbi	DDRB,LEDBIT
          .endmacro
00016a   +  	WAITMS	125
00016a e7ed      	ldi	X,0x7d
00016b de95      	rcall	waitxms
          .endmacro
00016c   +  	LIGHTBOTH
00016c 9abb      	sbi	DDRB,LEDBIT
          .endmacro
00016d   +  	WAITMS	125
00016d e7ed      	ldi	X,0x7d
00016e de92      	rcall	waitxms
          .endmacro
00016f   +  	LIGHTGRN
00016f 98bb      	cbi	DDRB,LEDBIT
          .endmacro
000170   +  	WAITMS	125
000170 e7ed      	ldi	X,0x7d
000171 de8f      	rcall	waitxms
          .endmacro
000172   +  	LIGHTBOTH
000172 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000173   +  	WAITMS	125
000173 e7ed      	ldi	X,0x7d
000174 de8c      	rcall	waitxms
          .endmacro
000175   +  	LIGHTGRN
000175 98bb      	cbi	DDRB,LEDBIT
          .endmacro
000176   +  	WAITMS	125
000176 e7ed      	ldi	X,0x7d
000177 de89      	rcall	waitxms
          .endmacro
000178   +  	LIGHTBOTH
000178 9abb      	sbi	DDRB,LEDBIT
          .endmacro
000179   +  	WAITMS	125
000179 e7ed      	ldi	X,0x7d
00017a de86      	rcall	waitxms
          .endmacro
00017b   +  	LIGHTGRN
00017b 98bb      	cbi	DDRB,LEDBIT
          .endmacro
00017c   +  	WAITMS	125
00017c e7ed      	ldi	X,0x7d
00017d de83      	rcall	waitxms
          .endmacro
         
00017e cfc0      	rjmp	cont0
         	
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'passive'
         ;*
         ;* This subroutine will just put the 'chip' in passive, tristate mode.
         ;* LED will be red
         ;*
         ;***************************************************************************
         
          passive:
00017f   +  	LIGHTOFF
00017f 98bb      	cbi	DDRB,LEDBIT
          .endmacro
         
000180 cfb6      	rjmp	cont
         
         ;****************************************************************************
         ;*
         ;* Main Program
         ;*
         ;* This program calls the routines "sysinit", "init", "scloop" and "cont"
         ;* in that order.
         ;*
         ;***************************************************************************
         
         ;***** Main Program Register Variables
         
          START:
         ; Init ports
000181 defd      	rcall sysinit
         ; Do the initial signalling. The LED will be set to green after this
000182 df2e      	rcall init
000183 df4c      	rcall	scloop
         
000184   +  	LIGHTGRN
000184 98bb      	cbi	DDRB,LEDBIT
          .endmacro
         
         ; ..and go wait for better weather or possibly a RESET
000185 cfb1      	rjmp	cont

Assembly complete with no errors.
