
AVRASM ver. 1.21  MC12.ASM Thu Sep 16 22:13:04 1999


         ;***************************************************************************
         ;* Playstation Import enabler code
         ;* 
         ;* File Name            :modchip.asm
         ;* Title                :Playstation Import enabler code
         ;* Date                 :99-04-22
         ;* Version              :1.3
         ;* Support email        :Hans@Liss.pp.se
         ;* Target MCU           :AT90S1200
         ;* Clock type		:2MHz ceramic resonator or equiv.
         ;*
         ;* DESCRIPTION
         ;*
         ;* This code will send a Playstation region code (four characters - SCEE
         ;* for Europe, SCEI for Japan and SCEA for the US) as a serial bitstream
         ;* at about 250bps on an I/O pin, for a short time after RESET. It also
         ;* acts as a software jumper between two lines, and can handle blanking of
         ;* another signal. All these signals will go tristate after a certain time
         ;* to hide the chip. The processor will restart when the lid is opened and
         ;* closed and when the RESET switch is pressed and released.
         ;*
         ;* There is an option of connecting a pair of switches against GND to two
         ;* pins, and they can then be used to select between three different CNT
         ;* values, or disable the chip completely. The status of the switches is
         ;* read every time the sequence is to be started.
         ;*
         ;* A three-legged, dual-colour LED can be connected to two of the I/O pins
         ;* and GND.
         ;* It will then be used to show what the processor is doing - cycling
         ;* between colours when the code is being sent, turning green when it's
         ;* ready, turning red when disabled and yellow during a pending RESET or
         ;* media change.
         ;*
         ;*                       Processor chip layout
         ;*
         ;*	                      -----v-----
         ;*                         1 [|o        |] 20   Vcc
         ;*		Lid        2 [|         |] 19   Calibrate
         ;*		Reset      3 [|         |] 18   Green LED
         ;*                         4 [|         |] 17   Red LED
         ;*                         5 [|         |] 16   Jumper OUT
         ;*              Blanking   6 [|         |] 15   Data OUT
         ;*                         7 [|         |] 14   Jumper IN
         ;*	                   8 [|         |] 13   Switch 2
         ;*	                   9 [|         |] 12   Switch 1
         ;*              GND       10 [|         |] 11
         ;*                            -----------
         ;*
         ;*
         ;* This code is inspired by Scott Rider's widely distributed modchip code for
         ;* the PIC 12C508. The Atmel chip is far better at most of these things - 
         ;* many more registers and much more orthogonal instruction set along with
         ;* four times the speed of a comparable PIC. The AT90S1200 is, however, more
         ;* expensive than the 12C508, but OTOH it has lots more I/O pins,
         ;* making all these bells and whistles possible. And programming it is fun!
         ;* I am working with Atmels own "wavrasm" which as far as I know is 
         ;* available on their home page on <http://www.atmel.com>.
         ;*
         ;* Going back to Scott Rider, we can define a mapping between the pin
         ;* connections for his code, which appears to be the same for most of the
         ;* commercially available chips. Pin 1 on the PIC is Vdd, 0-7V, and pin 8 is
         ;* GND. Pin 5 is used for the "blanking" signal, to block the real data from
         ;* the CD unit. Pin 6 is the serial data stream.
         ;* This means that going from a 12C508 to a AT90S1200 gives the following mapping:
         ;*
         ;*    From pin    To pin
         ;*           1 -> 20
         ;*           5 -> 6
         ;*           6 -> 15
         ;*           8 -> 10
         ;*
         ;* This code was made for a modern PU-22 motherboard, which is handled
         ;* somewhat differently. Instead of pin 5 on the 12C508, here we usually have
         ;* a jumper cable between two positions on the board. In this solution,
         ;* the LEFT one of these points should be connected to pin 14, "Jumper IN", and
         ;* the RIGHT one to pin 16, "Jumper OUT".
         ;* You can leave the jumper in there but then the chip can never be
         ;* completely hidden, which may or may not be significant.
         ;*
         ;* Where to find the RESET and Lid signals on an old motherboard is left as
         ;* an excercise for the reader. All I know is that the Lid signal was usually
         ;* pin 4 on the older, 18 pin 16c84 modchips.
         ;*
         ;* More info and pictures can be found on <http://www.maxking.com>.
         ;* On the PU-22 board, the CD Lid signal is the one close to the CD connector,
         ;* and the RESET signal can be found on the upper half of the board.
         ;*
         ;* ********* *NEW for version 1.1 ***************
         ;* I have cleaned up the delay sections and created a single delay function,
         ;* together with a matching macro, WAITMS. Now the chip will read its delay
         ;* constants from the EEPROM making it tunable to different chip speeds.
         ;* There is also a subroutine "calibrate" that can be used to calibrate the
         ;* delay loop. Connect a pushbutton between earth and pin 19 on the chip. Keep
         ;* this pressed when starting the Playstation and keep it pressed for exactly
         ;* 10 seconds, then release it. The new delay constants will be calculated
         ;* and stored into the EEPROM.
         ;*
         ;* ********* *NEW for version 1.2 ***************
         ;* I have remade some of the Count handling. There are still three different
         ;* Count values available, selectable with the switch. Now, however, it is
         ;* possible to change those values. To _decrease_ the current count value,
         ;* simply boot a game and press the Calibrate button whenever you think
         ;* that enough pulses have passed, usually just after the copyright screen
         ;* has disappeared and turned black. To _increase_ the value, wait until the
         ;* end of the cycle and then press the button. The current Count will increase
         ;* by ten.
         ;* There is now also a way to easily recalibrate the speed with a default value
         ;* for 5V. Just do a normal calibration but release the button almost immediately,
         ;* and the calibration values will be set to 115 and 103, respectively (my
         ;* calculated values).
         ;*
         ;* ********* *NEW for version 1.2.1 ***************
         ;* Added debounce to lid and RESET switches. Added weak pullup to RESET input
         ;*
         ;* ********* *NEW for version 1.3   ***************
         ;* The default timing is now calibrated for an AT90S1200 with a 2MHz ceramic
         ;* resonator, and the default Count value is calibrated for Final Fantasy VIII,
         ;* which works just fine with this code. All the features are still there but
         ;* they are mostly unnecessary now..
         ;*
         ;***************************************************************************
         
          .device	AT90S1200	;Prohibits use of non-implemented instructions
         
          .include "1200def.inc"
         ;***************************************************************************
         ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
         ;* 
         ;* Number		:AVR000
         ;* File Name		:"1200def.inc"
         ;* Title		:Register/Bit Definitions for the AT90S1200
         ;* Date	 		:97.12.11
         ;* Version		:1.20
         ;* Support telephone	:+47 72 88 87 20 (ATMEL Norway)
         ;* Support fax		:+47 72 88 87 18 (ATMEL Norway)
         ;* Support E-Mail	:avr@atmel.com
         ;* Target MCU		:AT90S1200
         ;*
         ;* DESCRIPTION
         ;* When including this file in the assembly program file, all I/O register
         ;* names and I/O register bit names appearing in the data book can be used.
         ;* 
         ;* The Register names are represented by their hexadecimal addresses.
         ;* 
         ;* The Register Bit names are represented by their bit number (0-7).
         ;* 
         ;* Please observe the difference in using the bit names with instructions
         ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc" 
         ;* (skip if bit in register set/cleared). The following example illustrates
         ;* this:
         ;* 
         ;* in	r16,PORTB		;read PORTB latch
         ;* sbr	r16,(1<<PB6)+(1<<PB5)	;set PB6 and PB5 (use masks, not bit#)
         ;* out  PORTB,r16		;output to PORTB
         ;*
         ;* in	r16,TIFR		;read the Timer Interrupt Flag Register
         ;* sbrc	r16,TOV0		;test the overflow flag (use bit#)
         ;* rjmp	TOV0_is_set		;jump if set
         ;* ...				;otherwise do something else
         ;***************************************************************************
         
         ;***** Specify Device
          .device AT90S1200
         
         ;***** I/O Register Definitions
          .equ	SREG	=$3f
          .equ	GIMSK	=$3b
          .equ	TIMSK	=$39
          .equ	TIFR	=$38
          .equ	MCUCR	=$35
          .equ	TCCR0	=$33
          .equ	TCNT0	=$32
          .equ	WDTCR	=$21
          .equ	EEAR	=$1e
          .equ	EEDR	=$1d
          .equ	EECR	=$1c
          .equ	PORTB	=$18
          .equ	DDRB	=$17
          .equ	PINB	=$16
          .equ	PORTD	=$12
          .equ	DDRD	=$11
          .equ	PIND	=$10
          .equ	ACSR	=$08
         
         ;***** Bit Definitions
         
          .equ	INT0	=6
         
          .equ	TOIE0	=1
         
          .equ	TOV0	=1
         
          .equ	SE	=5
          .equ	SM	=4
          .equ	ISC01	=1
          .equ	ISC00	=0
         
          .equ	CS02	=2
          .equ	CS01	=1
          .equ	CS00	=0
         
          .equ	WDE	=3
          .equ	WDP2	=2
          .equ	WDP1	=1
          .equ	WDP0	=0
         
          .equ	EEWE	=1
          .equ	EERE	=0
         
          .equ	PB7	=7
          .equ	PB6	=6
          .equ	PB5	=5
          .equ	PB4	=4
          .equ	PB3	=3
          .equ	PB2	=2
          .equ	PB1	=1
          .equ	PB0	=0
         
          .equ	DDB7	=7
          .equ	DDB6	=6
          .equ	DDB5	=5
          .equ	DDB4	=4
          .equ	DDB3	=3
          .equ	DDB2	=2
          .equ	DDB1	=1
          .equ	DDB0	=0
         
          .equ	PINB7	=7
          .equ	PINB6	=6
          .equ	PINB5	=5
          .equ	PINB4	=4
          .equ	PINB3	=3
          .equ	PINB2	=2
          .equ	PINB1	=1
          .equ	PINB0	=0
         
          .equ	PD6	=6
          .equ	PD5	=5
          .equ	PD4	=4
          .equ	PD3	=3
          .equ	PD2	=2
          .equ	PD1	=1
          .equ	PD0	=0
         
          .equ	DDD6	=6
          .equ	DDD5	=5
          .equ	DDD4	=4
          .equ	DDD3	=3
          .equ	DDD2	=2
          .equ	DDD1	=1
          .equ	DDD0	=0
         
          .equ	PIND6	=6
          .equ	PIND5	=5
          .equ	PIND4	=4
          .equ	PIND3	=3
          .equ	PIND2	=2
          .equ	PIND1	=1
          .equ	PIND0	=0
         
          .equ	ACD	=7
          .equ	ACO	=5
          .equ	ACI	=4
          .equ	ACIE	=3
          .equ	ACIS1	=1
          .equ	ACIS0	=0
         
          .equ	INT0addr=$001	;External Interrupt0 Vector Address
          .equ	OVF0addr=$002	;Overflow0 Interrupt Vector Address
          .equ	ACIaddr =$003	;Analog Comparator Interrupt Vector Address
         
          .def	ZL	=r30
         
          .LISTMAC
         
         ;***** Global Register Variables
         
         
         ;***** Arg registers
          .def	A1	=r16
          .def	A2	=r17
          .def	A3	=r18
          .def	CNT	=r19
          .def	D1	=r28
          .def	D2	=r29
          .def	X	=r30
          .def	curC	=r23
         
         ;***** Scratch regs
          .def	I	=r20
          .def	J	=r21
          .def	K	=r22
         
         ;***** EEPROM vars
          .equ	storedD1=0
          .equ	storedD2=1
          .equ	storedC1=2
          .equ	storedC2=3
          .equ	storedC3=4
         
         ;.equ	defaultD1=115
         ;.equ	defaultD2=103
          .equ	defaultD1=$DF
          .equ	defaultD2=$C8
          .equ	defaultC=100
         
         ;******* PORT B
         
         ;  Switches - active low: 0=off, 1=Use COUNT1, 2=Use COUNT2, 3=Use COUNT3
          .equ	SWITCH1=0
          .equ	SWITCH2=1
         
          .equ	SWITCH3=7
         
         ;  "Jumper" input
          .equ	JUMPIN=2
         
         ;  Subchannel data stream, output
          .equ	PORTBIT=3
         
         ;  "Jumper" output
          .equ	JUMPOUT=4
         
         ;  Red and green LED ouput pins
          .equ	RLEDBIT=5
          .equ	GLEDBIT=6
         
         ;******* PORT D
         
         ;  Reset signal, active low input
          .equ	RSIG=1
         
         ;  Media change signal, active high input
          .equ	LSIG=0
         
         ;  "Blanking" signal - extra pin for old PSX 4-line chips
          .equ	BLANK=2
         
         ;Count values for short and long settings, respectively
          .equ	COUNT1=86
          .equ	COUNT2=93
          .equ	COUNT3=99
         
         ;***** Macros
          .macro	SENDONE
          	cbi	DDRB,PORTBIT
          .endmacro
         
          .macro	SENDZERO
          	sbi	DDRB,PORTBIT
          .endmacro
         
          .macro	LIGHTBOTH
          	sbi	PORTB,GLEDBIT
          	sbi	PORTB,RLEDBIT
          .endmacro
         
          .macro	LIGHTRED
          	sbi	PORTB,GLEDBIT
          	cbi	PORTB,RLEDBIT
          .endmacro
         
          .macro	LIGHTGRN
          	cbi	PORTB,GLEDBIT
          	sbi	PORTB,RLEDBIT
          .endmacro
         
          .macro	LIGHTOFF
          	cbi	PORTB,GLEDBIT
          	cbi	PORTB,RLEDBIT
          .endmacro
         
          .macro	WAITMS
          	ldi	X,@0
          	rcall	waitxms
          .endmacro
         
         ; Execute the software "jumper". Five cycles.
          .macro	DOJUMP
          	sbis	PINB,JUMPIN
          	sbi	DDRB,JUMPOUT
          	sbic	PINB,JUMPIN
          	cbi	DDRB,JUMPOUT
          .endmacro
         
          .macro	ENBLANK
          	cbi	PORTD,BLANK
          	sbi	DDRD,BLANK
          .endmacro
         
          .macro	DEBLANK
          	cbi	PORTD,BLANK
          	cbi	DDRD,BLANK
          .endmacro
         
         ;***** Code
         
000000 c17a      	rjmp	START		;Reset Handle
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'waitxms'
         ;*
         ;* Stored vars D1 and D2 is used for calibration.
         ;*
         ;* This subroutine will wait for x ms minus one LDI+call+return.
         ;* The innermost loop is D1 * (5 + 1 + 1 + 2) cycles. We execute that loop
         ;* (+ 3 cycles for DEC+BRNI) X-1 times, and then we do the rest minus 8 cycles
         ;* in a separate loop (D2 * (5 + 1 + 1 + 1 + 2)). This leaves 8 cycles = 7 for
         ;* call/return and one for the necessary LDI X,# instruction.
         ;*
         ;***************************************************************************
         
         
          waitxms:
000001 95ea      	dec	X
000002 f079      	breq	vxloop20
          wxloop0:
000003 2f4c      	mov	I,d1
          wxloop1:
000004   +  	DOJUMP
000004 9bb2      	sbis	PINB,JUMPIN
000005 9abc      	sbi	DDRB,JUMPOUT
000006 99b2      	sbic	PINB,JUMPIN
000007 98bc      	cbi	DDRB,JUMPOUT
          .endmacro
000008 0000      	nop
000009 0000      	nop
00000a 0000      	nop
00000b 0000      	nop
00000c 0000      	nop
00000d 0000      	nop
00000e 954a      	dec	I
00000f f7a1      	brne	wxloop1
         
000010 95ea      	dec	X
000011 f789      	brne	wxloop0
         
          vxloop20:
000012 2f4d      	mov	I,d2
          wxloop2:
000013   +  	DOJUMP
000013 9bb2      	sbis	PINB,JUMPIN
000014 9abc      	sbi	DDRB,JUMPOUT
000015 99b2      	sbic	PINB,JUMPIN
000016 98bc      	cbi	DDRB,JUMPOUT
          .endmacro
000017 0000      	nop
000018 0000      	nop
000019 0000      	nop
00001a 0000      	nop
00001b 0000      	nop
00001c 0000      	nop
00001d 0000      	nop
00001e 954a      	dec	I
00001f f799      	brne	wxloop2
         
000020 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'calibrate', called from sysinit
         ;*
         ;* Do 10000 cycles each loop, increasing r24:r25 by one each pass.
         ;* This subroutine will calibrate 1 ms if run during 10 sec. The switch on
         ;* SWITCH3 is checked for release on every pass.
         ;*
         ;* 'makecns' will calculate the delay constants d1 and d2 as follows:
         ;* 	d1=(n-3)/9
         ;* 	d2=(n-8)/10
         ;* and then store them to the EEPROM
         ;*
         ;****************************************************************************
         
          calibrate:
000021   +  	LIGHTRED
000021 9ac6      	sbi	PORTB,GLEDBIT
000022 98c5      	cbi	PORTB,RLEDBIT
          .endmacro
000023 e080      	ldi	r24,0
000024 e090      	ldi	r25,0
          cloop0:
000025 99b7      	sbic	PINB,SWITCH3
000026 c00a      	rjmp	makecns
         
000027 e245      	ldi	I,37
          cloop1:
000028 e559      	ldi	J,89
          cloop2:
000029 955a      	dec	J
00002a f7f1      	brne	cloop2
         
00002b 954a      	dec	I
00002c f7d9      	brne	cloop1
         
00002d 9593      	inc	r25
00002e f7b1      	brne	cloop0
00002f 9583      	inc	r24
000030 cff4      	rjmp	cloop0
         
          makecns:
000031 5093      	subi	r25,3
000032 4080      	sbci	r24,0
         
          mc01:
000033 2fa8      	mov	r26,r24
000034 2fb9      	mov	r27,r25
000035 e0c0      	ldi	d1,0
          l1:
000036 30a0      	cpi	r26,0
000037 f411      	brne	l12
000038 30b9      	cpi	r27,9
000039 f020      	brlo	l13
          l12:
00003a 50b9      	subi	r27,9
00003b 40a0      	sbci	r26,0
         
00003c 95c3      	inc	d1
00003d cff8      	rjmp	l1
         
          l13:
00003e 5095      	subi	r25,5
00003f 4080      	sbci	r24,0
000040 e0d0      	ldi	d2,0
          l2:
000041 3080      	cpi	r24,0
000042 f411      	brne	l22
000043 309a      	cpi	r25,10
000044 f020      	brlo	l23
          l22:
000045 509a      	subi	r25,10
000046 4080      	sbci	r24,0
         
000047 95d3      	inc	d2
000048 cff8      	rjmp	l2
         
          l23:
         ; ** If d1 is less than 5, we have a value reset at hand and will set
         ; ** the values to a suitable 5V default
000049 30c5      	cpi	d1,5
00004a f4b0      	brsh	l231
00004b edcf      	ldi	d1,defaultD1
00004c ecd8      	ldi	d2,defaultD2
00004d   +  	LIGHTBOTH
00004d 9ac6      	sbi	PORTB,GLEDBIT
00004e 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00004f   +  	WAITMS	125
00004f e7ed      	ldi	X,0x7d
000050 dfb0      	rcall	waitxms
          .endmacro
000051   +  	LIGHTGRN
000051 98c6      	cbi	PORTB,GLEDBIT
000052 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000053   +  	WAITMS	125
000053 e7ed      	ldi	X,0x7d
000054 dfac      	rcall	waitxms
          .endmacro
000055   +  	LIGHTBOTH
000055 9ac6      	sbi	PORTB,GLEDBIT
000056 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000057   +  	WAITMS	125
000057 e7ed      	ldi	X,0x7d
000058 dfa8      	rcall	waitxms
          .endmacro
000059   +  	LIGHTGRN
000059 98c6      	cbi	PORTB,GLEDBIT
00005a 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00005b   +  	WAITMS	125
00005b e7ed      	ldi	X,0x7d
00005c dfa4      	rcall	waitxms
          .endmacro
00005d   +  	LIGHTBOTH
00005d 9ac6      	sbi	PORTB,GLEDBIT
00005e 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00005f   +  	WAITMS	125
00005f e7ed      	ldi	X,0x7d
000060 dfa0      	rcall	waitxms
          .endmacro
          l231:
000061 e040      	ldi	I,storedD1
000062 bb4e      	out	EEAR,I
000063 bbcd      	out	EEDR,d1
000064 9ae1      	sbi	EECR,EEWE
          l24:
000065 99e1      	sbic	EECR,EEWE
000066 cffe      	rjmp	l24
         
000067 e041      	ldi	I,storedD2
000068 bb4e      	out	EEAR,I
000069 bbdd      	out	EEDR,d2
00006a 9ae1      	sbi	EECR,EEWE
         
00006b   +  	LIGHTGRN
00006b 98c6      	cbi	PORTB,GLEDBIT
00006c 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00006d c0b2      	rjmp	cont
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'sendbyte'
         ;*
         ;* This subroutine will send one character to the (globally defined) I/O
         ;* port.
         ;* A 'one' is done by making the port bit an input bit and letting the
         ;* PSX pullup pull the line up. A 'zero' is done by making it an output
         ;* - the port bit data is a 'zero' during all this so the only thing
         ;* that changes is the port direction, which is set to 'one' for output
         ;* ('zero'), and 'zero' for input ('one').
         ;* Each bit will take 4 ms, and one start bit and two stop bits will be sent
         ;*
         ;***************************************************************************
         
          sendbyte:
         ; Invert byte
00006e 9500      	com	A1
         ; Send a start bit
00006f   +  	SENDONE
00006f 98bb      	cbi	DDRB,PORTBIT
          .endmacro
000070   +  	WAITMS	4
000070 e0e4      	ldi	X,0x4
000071 df8f      	rcall	waitxms
          .endmacro
000072 e018      	ldi	A2,8
000073 9507      sbloop0:ror	A1
000074 f010      	brcs	bitset
000075   +  	SENDZERO
000075 9abb      	sbi	DDRB,PORTBIT
          .endmacro
000076 f408      	brcc	bitclr
000077   +  bitset:	SENDONE
000077 98bb      	cbi	DDRB,PORTBIT
          .endmacro
000078   +  bitclr:	WAITMS	4
000078 e0e4      	ldi	X,0x4
000079 df87      	rcall	waitxms
          .endmacro
00007a 951a      	dec	A2
00007b f7b9      	brne	sbloop0
         ; Send two stop bits
00007c   +  	SENDZERO
00007c 9abb      	sbi	DDRB,PORTBIT
          .endmacro
00007d   +  	WAITMS	4
00007d e0e4      	ldi	X,0x4
00007e df82      	rcall	waitxms
          .endmacro
00007f   +  	WAITMS	4
00007f e0e4      	ldi	X,0x4
000080 df80      	rcall	waitxms
          .endmacro
000081 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'sysinit'
         ;*
         ;* This subroutine will initialize the I/O ports and check the switch
         ;* settings
         ;*
         ;* LED is unlit
         ;*
         ;***************************************************************************
         
          sysinit:
         ; Prepare the Reset and Media Change signal inputs (no pullup)
         ; and the SWITCH3 portbit (internal pullup)
000082 9889      	cbi	DDRD,RSIG
000083 9888      	cbi	DDRD,LSIG
000084 9a91      	sbi	PORTD,RSIG
000085 9890      	cbi	PORTD,LSIG
000086 98bf      	cbi	DDRB,SWITCH3
000087 9ac7      	sbi	PORTB,SWITCH3
         
         ; Set the LED signals as output
000088 9abe      	sbi	DDRB,GLEDBIT
000089 9abd      	sbi	DDRB,RLEDBIT
         
         ; Load the stored variables from the EEPROM
00008a e040      	ldi	I,storedD1
00008b bb4e      	out	EEAR,I
00008c 9ae0      	sbi	EECR,EERE
00008d b3cd      	in	d1,EEDR
00008e e041      	ldi	I,storedD2
00008f bb4e      	out	EEAR,I
000090 9ae0      	sbi	EECR,EERE
000091 b3dd      	in	d2,EEDR
         
000092 3fcf      	cpi	d1,255
000093 f411      	brne	sinit00
000094 edcf      	ldi	d1,defaultD1
000095 ecd8      	ldi	d2,defaultD2
         
          sinit00:
         
         ; Check if the Calibrate switch is pressed
000096 9bb7      	sbis	PINB,SWITCH3
000097 cf89      	rjmp	calibrate
         
         ; Check the DIP switch to see whether we should go tristate or which count calue
         ; to select
000098 98b8      	cbi	DDRB,SWITCH1
000099 9ac0      	sbi	PORTB,SWITCH1
00009a 98b9      	cbi	DDRB,SWITCH2
00009b 9ac1      	sbi	PORTB,SWITCH2
         
00009c 99b0      	sbic	PINB,SWITCH1
00009d c004      	rjmp	sinit1
00009e 9bb1      	sbis	PINB,SWITCH2
00009f c0d6      	rjmp	passive
0000a0 e073      	ldi	curC,storedC2
0000a1 c005      	rjmp	sinitx
         
          sinit1:
0000a2 99b1      	sbic	PINB,SWITCH2
0000a3 c002      	rjmp	sinit3
0000a4 e072      	ldi	curC,storedC1
0000a5 c001      	rjmp	sinitx
         
          sinit3:
0000a6 e074      	ldi	curC,storedC3
         
          sinitx:
0000a7 bb7e      	out	EEAR,curC
0000a8 9ae0      	sbi	EECR,EERE
0000a9 b33d      	in	CNT,EEDR
         
0000aa 3f3f      	cpi	CNT,255
0000ab f409      	brne	sinitx1
0000ac e634      	ldi	CNT,defaultC
         
          sinitx1:
0000ad   +  	SENDONE
0000ad 98bb      	cbi	DDRB,PORTBIT
          .endmacro
0000ae 98c3      	cbi	PORTB,PORTBIT
         
         
         ; Prepare the "jumper" bits. The input will have a pullup and the output
         ; will assume there is a pullup, and send the bits in the same way as the
         ; data is sent on PORTBIT. 
0000af 98bc      	cbi	DDRB,JUMPOUT
0000b0 98ba      	cbi	DDRB,JUMPIN
0000b1 9ac2      	sbi	PORTB,JUMPIN
0000b2 98c4      	cbi	PORTB,JUMPOUT
         
0000b3 e063      	ldi	k,3
0000b4 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'init'
         ;*
         ;* This subroutine will wait for 50 ms and then take the I/O port bit low,
         ;* then wait for 1164 ms more before returning. 850 ms into the latter, the
         ;* blanking bit is taken low.
         ;*
         ;***************************************************************************
         
          init:
0000b5   +  	WAITMS	50
0000b5 e3e2      	ldi	X,0x32
0000b6 df4a      	rcall	waitxms
          .endmacro
         ;make pin go low as output
0000b7   +  	SENDZERO
0000b7 9abb      	sbi	DDRB,PORTBIT
          .endmacro
0000b8 e111      	ldi	A2,17
0000b9   +  iloop1:	WAITMS	50
0000b9 e3e2      	ldi	X,0x32
0000ba df46      	rcall	waitxms
          .endmacro
0000bb 951a      	dec	A2
0000bc f7e1      	brne	iloop1
0000bd   +  	ENBLANK
0000bd 9892      	cbi	PORTD,BLANK
0000be 9a8a      	sbi	DDRD,BLANK
          .endmacro
0000bf e016      	ldi	A2,6
0000c0   +  iloop2:	WAITMS	50
0000c0 e3e2      	ldi	X,0x32
0000c1 df3f      	rcall	waitxms
          .endmacro
0000c2 951a      	dec	A2
0000c3 f7e1      	brne	iloop2
0000c4   +  	WAITMS	14
0000c4 e0ee      	ldi	X,0xe
0000c5 df3b      	rcall	waitxms
          .endmacro
0000c6 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'sendcode'
         ;*
         ;* This subroutine will send a four-byte string to the (globally defined)
         ;* I/O port a specified number of times, then return.
         ;*
         ;***************************************************************************
         
          sendcode:
0000c7 2f23      	mov	A3,CNT
          scloop0:
0000c8 d048      	rcall	clight
         
0000c9   +  	WAITMS	72
0000c9 e4e8      	ldi	X,0x48
0000ca df36      	rcall	waitxms
          .endmacro
0000cb e503      	ldi	A1,'S'
0000cc dfa1      	rcall	sendbyte
0000cd e403      	ldi	A1,'C'
0000ce df9f      	rcall	sendbyte
0000cf e405      	ldi	A1,'E'
0000d0 df9d      	rcall	sendbyte
0000d1 e405      	ldi	A1,'E'
0000d2 df9b      	rcall	sendbyte
         
0000d3 952a      	dec	A3
         
         ; Check if the Calibrate switch is pressed. If it is,
         ; terminate the loop here and store the new value for
         ; this particular COUNT in the EEPROM
         
0000d4 9bb7      	sbis	PINB,SWITCH3
0000d5 c002      	rjmp	screcal
         
0000d6 f789      	brne	scloop0
0000d7 9508      	ret
         
          screcal:
0000d8 9bb7      	sbis	PINB,SWITCH3
0000d9 cffe      	rjmp	screcal
         
0000da 1b32      	sub	CNT,A3
0000db bb7e      	out	EEAR,curC
0000dc bb3d      	out	EEDR,CNT
0000dd 9ae1      	sbi	EECR,EEWE
          scrc01:
0000de 99e1      	sbic	EECR,EEWE
0000df cffe      	rjmp	scrc01
         
0000e0   +  	LIGHTBOTH
0000e0 9ac6      	sbi	PORTB,GLEDBIT
0000e1 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
0000e2   +  	WAITMS	125
0000e2 e7ed      	ldi	X,0x7d
0000e3 df1d      	rcall	waitxms
          .endmacro
0000e4   +  	LIGHTGRN
0000e4 98c6      	cbi	PORTB,GLEDBIT
0000e5 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
0000e6   +  	WAITMS	125
0000e6 e7ed      	ldi	X,0x7d
0000e7 df19      	rcall	waitxms
          .endmacro
0000e8   +  	LIGHTBOTH
0000e8 9ac6      	sbi	PORTB,GLEDBIT
0000e9 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
0000ea   +  	WAITMS	125
0000ea e7ed      	ldi	X,0x7d
0000eb df15      	rcall	waitxms
          .endmacro
0000ec   +  	LIGHTGRN
0000ec 98c6      	cbi	PORTB,GLEDBIT
0000ed 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
0000ee   +  	WAITMS	125
0000ee e7ed      	ldi	X,0x7d
0000ef df11      	rcall	waitxms
          .endmacro
0000f0   +  	LIGHTBOTH
0000f0 9ac6      	sbi	PORTB,GLEDBIT
0000f1 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
0000f2   +  	WAITMS	125
0000f2 e7ed      	ldi	X,0x7d
0000f3 df0d      	rcall	waitxms
          .endmacro
0000f4   +  	LIGHTGRN
0000f4 98c6      	cbi	PORTB,GLEDBIT
0000f5 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
0000f6   +  	WAITMS	125
0000f6 e7ed      	ldi	X,0x7d
0000f7 df09      	rcall	waitxms
          .endmacro
0000f8   +  	LIGHTBOTH
0000f8 9ac6      	sbi	PORTB,GLEDBIT
0000f9 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
0000fa   +  	WAITMS	125
0000fa e7ed      	ldi	X,0x7d
0000fb df05      	rcall	waitxms
          .endmacro
0000fc   +  	LIGHTGRN
0000fc 98c6      	cbi	PORTB,GLEDBIT
0000fd 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
0000fe   +  	WAITMS	125
0000fe e7ed      	ldi	X,0x7d
0000ff df01      	rcall	waitxms
          .endmacro
000100   +  	LIGHTBOTH
000100 9ac6      	sbi	PORTB,GLEDBIT
000101 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000102   +  	WAITMS	125
000102 e7ed      	ldi	X,0x7d
000103 defd      	rcall	waitxms
          .endmacro
000104   +  	LIGHTGRN
000104 98c6      	cbi	PORTB,GLEDBIT
000105 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000106   +  	WAITMS	125
000106 e7ed      	ldi	X,0x7d
000107 def9      	rcall	waitxms
          .endmacro
000108   +  	LIGHTBOTH
000108 9ac6      	sbi	PORTB,GLEDBIT
000109 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00010a   +  	WAITMS	125
00010a e7ed      	ldi	X,0x7d
00010b def5      	rcall	waitxms
          .endmacro
00010c   +  	LIGHTGRN
00010c 98c6      	cbi	PORTB,GLEDBIT
00010d 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00010e   +  	WAITMS	125
00010e e7ed      	ldi	X,0x7d
00010f def1      	rcall	waitxms
          .endmacro
         
000110 9508      	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'clight'
         ;*
         ;* This subroutine will set the color of the color LED to one of three states:
         ;* red, green or both
         ;*
         ;***************************************************************************
         
          clight:
000111 2f06      	mov	A1,K
000112 9507      	ror	A1
000113 f010      	brcs	lowset
000114 98c6      	cbi	PORTB,GLEDBIT
000115 f408      	brcc	lowclr
000116 9ac6      lowset:	sbi	PORTB,GLEDBIT	
000117 9507      lowclr:	ror	A1
000118 f010      	brcs	hiset
000119 98c5      	cbi	PORTB,RLEDBIT
00011a f408      	brcc	hiclr
00011b 9ac5      hiset:	sbi	PORTB,RLEDBIT
00011c 956a      hiclr:	dec	K
00011d f409      	brne	cret
00011e e063      	ldi	K,3
00011f 9508      cret:	ret
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'cont'
         ;*
         ;* This subroutine will do whatever the processor is supposed to do after
         ;* sending the code for the specified time. For now this means to loop,
         ;* possibly restarting on reset or "open lid"
         ;*
         ;***************************************************************************
         
          cont:
000120   +  	DEBLANK
000120 9892      	cbi	PORTD,BLANK
000121 988a      	cbi	DDRD,BLANK
          .endmacro
000122 98bb      	cbi	DDRB,PORTBIT
000123 98c3      	cbi	PORTB,PORTBIT
000124 98bc      	cbi	DDRB,JUMPOUT
000125 98ba      	cbi	DDRB,JUMPIN
000126 98c2      	cbi	PORTB,JUMPIN
000127 98c4      	cbi	PORTB,JUMPOUT
         
          cont0:
000128 9b81      	sbis	PIND,RSIG
000129 c005      	rjmp	rcheck
00012a 9980      	sbic	PIND,LSIG
00012b c00a      	rjmp	lcheck
00012c 9bb7      	sbis	PINB,SWITCH3
00012d c00f      	rjmp	countup
00012e cff9      	rjmp	cont0
         
         ; Wait for Reset button release
          rcheck:
00012f   +  	WAITMS	1
00012f e0e1      	ldi	X,0x1
000130 ded0      	rcall	waitxms
          .endmacro
000131   +  	LIGHTBOTH
000131 9ac6      	sbi	PORTB,GLEDBIT
000132 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000133 9b81      	sbis	PIND,RSIG
000134 cffa      	rjmp	rcheck
000135 c045      	rjmp	START
         	
         ; Wait for Close
          lcheck:
000136   +  	WAITMS	1
000136 e0e1      	ldi	X,0x1
000137 dec9      	rcall	waitxms
          .endmacro
000138   +  	LIGHTBOTH
000138 9ac6      	sbi	PORTB,GLEDBIT
000139 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00013a 9980      	sbic	PIND,LSIG
00013b cffa      	rjmp	lcheck
00013c c03e      	rjmp	START
         
         ; Increase the current COUNT value by 10 if the
         ; calibrate button is pressed.
         
          countup:
00013d 9bb7      	sbis	PINB,SWITCH3
00013e cffe      	rjmp	countup
         
00013f 5f36      	subi	CNT,-10
000140 bb7e      	out	EEAR,curC
000141 bb3d      	out	EEDR,CNT
000142 9ae1      	sbi	EECR,EEWE
          cu01:
000143 99e1      	sbic	EECR,EEWE
000144 cffe      	rjmp	cu01
         
000145   +  	LIGHTBOTH
000145 9ac6      	sbi	PORTB,GLEDBIT
000146 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000147   +  	WAITMS	125
000147 e7ed      	ldi	X,0x7d
000148 deb8      	rcall	waitxms
          .endmacro
000149   +  	LIGHTGRN
000149 98c6      	cbi	PORTB,GLEDBIT
00014a 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00014b   +  	WAITMS	125
00014b e7ed      	ldi	X,0x7d
00014c deb4      	rcall	waitxms
          .endmacro
00014d   +  	LIGHTBOTH
00014d 9ac6      	sbi	PORTB,GLEDBIT
00014e 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00014f   +  	WAITMS	125
00014f e7ed      	ldi	X,0x7d
000150 deb0      	rcall	waitxms
          .endmacro
000151   +  	LIGHTGRN
000151 98c6      	cbi	PORTB,GLEDBIT
000152 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000153   +  	WAITMS	125
000153 e7ed      	ldi	X,0x7d
000154 deac      	rcall	waitxms
          .endmacro
000155   +  	LIGHTBOTH
000155 9ac6      	sbi	PORTB,GLEDBIT
000156 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000157   +  	WAITMS	125
000157 e7ed      	ldi	X,0x7d
000158 dea8      	rcall	waitxms
          .endmacro
000159   +  	LIGHTGRN
000159 98c6      	cbi	PORTB,GLEDBIT
00015a 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00015b   +  	WAITMS	125
00015b e7ed      	ldi	X,0x7d
00015c dea4      	rcall	waitxms
          .endmacro
00015d   +  	LIGHTBOTH
00015d 9ac6      	sbi	PORTB,GLEDBIT
00015e 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00015f   +  	WAITMS	125
00015f e7ed      	ldi	X,0x7d
000160 dea0      	rcall	waitxms
          .endmacro
000161   +  	LIGHTGRN
000161 98c6      	cbi	PORTB,GLEDBIT
000162 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000163   +  	WAITMS	125
000163 e7ed      	ldi	X,0x7d
000164 de9c      	rcall	waitxms
          .endmacro
000165   +  	LIGHTBOTH
000165 9ac6      	sbi	PORTB,GLEDBIT
000166 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000167   +  	WAITMS	125
000167 e7ed      	ldi	X,0x7d
000168 de98      	rcall	waitxms
          .endmacro
000169   +  	LIGHTGRN
000169 98c6      	cbi	PORTB,GLEDBIT
00016a 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00016b   +  	WAITMS	125
00016b e7ed      	ldi	X,0x7d
00016c de94      	rcall	waitxms
          .endmacro
00016d   +  	LIGHTBOTH
00016d 9ac6      	sbi	PORTB,GLEDBIT
00016e 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
00016f   +  	WAITMS	125
00016f e7ed      	ldi	X,0x7d
000170 de90      	rcall	waitxms
          .endmacro
000171   +  	LIGHTGRN
000171 98c6      	cbi	PORTB,GLEDBIT
000172 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
000173   +  	WAITMS	125
000173 e7ed      	ldi	X,0x7d
000174 de8c      	rcall	waitxms
          .endmacro
         
000175 cfb2      	rjmp	cont0
         	
         
         ;****************************************************************************
         ;*
         ;* Subroutine 'passive'
         ;*
         ;* This subroutine will just put the 'chip' in passive, tristate mode.
         ;* LED will be red
         ;*
         ;***************************************************************************
         
          passive:
000176 9abe      	sbi	DDRB,GLEDBIT
000177 9abd      	sbi	DDRB,RLEDBIT
000178   +  	LIGHTRED
000178 9ac6      	sbi	PORTB,GLEDBIT
000179 98c5      	cbi	PORTB,RLEDBIT
          .endmacro
         
00017a cfa5      	rjmp	cont
         
         ;****************************************************************************
         ;*
         ;* Main Program
         ;*
         ;* This program calls the routines "sysinit", "init", "sendcode" and "cont"
         ;* in that order.
         ;*
         ;***************************************************************************
         
         ;***** Main Program Register Variables
         
          START:
         ; Init ports
00017b df06      	rcall sysinit
         ; Do the initial signalling. The LED will be set to green after this
00017c df38      	rcall init
00017d df49      	rcall	sendcode
         
00017e   +  	LIGHTGRN
00017e 98c6      	cbi	PORTB,GLEDBIT
00017f 9ac5      	sbi	PORTB,RLEDBIT
          .endmacro
         
         ; ..and go wait for better weather or possibly a RESET
000180 cf9f      	rjmp	cont

Assembly complete with no errors.
